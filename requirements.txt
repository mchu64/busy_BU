
Project Description:

Our project is a web application tracking the busyness of Fit Rec at BU, using user feedback to guage how busy the gym is. The tech stack includes MongoDB, Node.js, vue.js, and Express. Live data will be stored and retrieved from the database, displayed on the web app with a 1-5 rating system indicating gym busyness (5 being the busiest). We then use our two APIs Openweather and Openai to form a chatbot that will advise you on if going to gym is a good decision or not today.

Product Requirements:

Goal:
Develop a user-friendly web interface for real-time business monitoring and analysis at FitRec, BU that also utilizes a chatbot.

Non-Goal:
Implementing a mobile application for busyness tracking.

Non-functional Requirement 1: Privacy

Functional Requirements:
i. Ensure anonymized user data without personally identifiable information.
ii. Allow oauth for more secure user logging.
iii. Emphasize accurate estimates of gym busyness.

Non-functional Requirement 2: Performance

Functional Requirements:
i. Chatbot must be accurate in temperature and responses
ii. Optimize for handling up to 500 simultaneous user connections without significant performance degradation.

---

Product Management:

Theme:
Maintain a sleek and user-friendly design with a dynamic background showcasing various sections of FitRec.

Epic: Gym Busyness Tracker

User Story 1: As a fitness enthusiast, I want to effortlessly check how busy Fit Rec is in real-time.

- Task 1: Develop an accurate chatbot response.
  - Ticket 1: Ensure the user feedback is working and accurate.
  - Ticket 2: Make sure the temperature api is accurate

User Story 2: With such a large gym, I want to track those parts of the gym specifically

- Task 1: Enable specific FitRec area tracking
  - Ticket 1: Design a suitable database structure for storing each gym area
  - Ticket 2: Implement a usable database for storing these values

User Story 3: As a privacy-conscious user, I want control over my data and the option to opt-out of certain tracking features.

- Task 1: Ensure privacy in data collection.  
- Ticket 1: Anonymize all user data, avoiding storage of personally identifiable information with oauth. 
 - Ticket 2: Provide users with the option of just using the chatbot and not user rating.
